{"version":3,"sources":["components/FeedbackOptions.js","components/Section.js","components/Statistics.js","components/Notification.js","components/App.js","index.js"],"names":["Button","styled","button","FeedbackOptions","options","onLeaveFeedback","map","option","onClick","key","uuid","label","charAt","toUpperCase","slice","SectionWrapper","div","Title","h2","Section","title","children","FeedbackLabel","p","Statistics","good","neutral","bad","total","positivePercentage","Message","h3","Notification","message","App","state","handleBtnClick","name","setState","prevState","countTotalFeedback","countPositiveFeedback","parseFloat","toFixed","Object","keys","this","Component","ReactDOM","render","document","getElementById"],"mappings":"wZAMA,IAAMA,EAASC,IAAOC,OAAV,KASG,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAEjD,OACE,6BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,kBAACP,EAAD,CAAQQ,QAASH,EAAgBE,GAASE,IAAKC,kBAA/C,KATuBC,EASwDJ,GARxEK,OAAO,GAAGC,cAAgBF,EAAMG,MAAM,IADrD,IAA+BH,M,0ICP/B,IAAMI,EAAiBd,IAAOe,IAAV,KAEdC,EAAQhB,IAAOiB,GAAV,KAEI,SAASC,EAAT,GAAqC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SAEtC,OACE,kBAACN,EAAD,KACE,kBAACE,EAAD,SAASG,EAAT,KACCC,G,qECTP,IAAMC,EAAgBrB,IAAOsB,EAAV,KAEJ,SAASC,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAE9D,OACE,6BACE,kBAACP,EAAD,cAAsBG,GACtB,kBAACH,EAAD,iBAAyBI,GACzB,kBAACJ,EAAD,aAAqBK,GACrB,kBAACL,EAAD,eAAuBM,GACvB,kBAACN,EAAD,2BAAmCO,EAAnC,O,uECVN,IAAMC,EAAU7B,IAAO8B,GAAV,KAGE,SAASC,EAAT,GAAkC,IAAXC,EAAU,EAAVA,QACpC,OACE,kBAACH,EAAD,KAAUG,G,ICFOC,E,2MAUnBC,MAAQ,CACNV,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPS,eAAiB,SAACC,GAAD,OAAU,WACzB,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAOE,EAAUF,GAAQ,Q,EAI9BG,mBAAqB,WACnB,OACE,EAAKL,MAAMR,IAAM,EAAKQ,MAAMT,QAAU,EAAKS,MAAMV,M,EAIrDgB,sBAAwB,WACtB,OAAOC,WAAyC,IAA9B,EAAKF,qBAA6B,GAAK,EAAKL,MAAMV,KAAO,EAAKe,qBAAuB,KAAKG,QAAQ,K,wEAIpH,IAAMvC,EAAUwC,OAAOC,KAAKC,KAAKX,OAEjC,OACI,oCACA,kBAAChB,EAAD,CAASC,MAAO,yBACd,kBAACjB,EAAD,CAAiBE,gBAAiByC,KAAKV,eAAgBhC,QAASA,KAEjC,IAA9B0C,KAAKN,qBACC,kBAACR,EAAD,CAAcC,QAAS,sBACvB,kBAACd,EAAD,CAASC,MAAO,cACjB,kBAACI,EAAD,CACIC,KAAMqB,KAAKX,MAAMV,KACjBE,IAAKmB,KAAKX,MAAMR,IAChBD,QAASoB,KAAKX,MAAMT,QACpBG,mBAAoBiB,KAAKL,wBACzBb,MAAOkB,KAAKN,6B,GAhDCO,aCHjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ecc0188a.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { uuid } from 'uuidv4';\n\n\nconst Button = styled.button`\n    margin-right: 7px;\n    border-radius: 5px;\n`;\n\nfunction capitalizeButtonLabel(label) {\n  return label.charAt(0).toUpperCase() + label.slice(1)\n}\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n\n  return (\n    <div>\n      {options.map((option) => (\n        <Button onClick={onLeaveFeedback(option)} key={uuid()}> {capitalizeButtonLabel(option)}</Button>\n      ))}\n    </div>\n  )\n\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst SectionWrapper = styled.div``;\n\nconst Title = styled.h2``;\n\nexport default function Section({title, children}) {\n\n  return (\n    <SectionWrapper>\n      <Title> {title} </Title>\n      {children}\n    </SectionWrapper>\n  )\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.object.isRequired\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst FeedbackLabel = styled.p``;\n\nexport default function Statistics({ good, neutral, bad, total, positivePercentage }) {\n\n  return (\n    <div>\n      <FeedbackLabel>Good: {good}</FeedbackLabel>\n      <FeedbackLabel>Neutral: {neutral}</FeedbackLabel>\n      <FeedbackLabel>Bad: {bad}</FeedbackLabel>\n      <FeedbackLabel>Total: {total}</FeedbackLabel>\n      <FeedbackLabel>Positive feedback: {positivePercentage} %</FeedbackLabel>\n    </div>\n  )\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Message = styled.h3`\n`;\n\nexport default function Notification({message}) {\n  return (\n    <Message>{message}</Message>\n  )\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired\n};","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport FeedbackOptions from \"./FeedbackOptions\";\nimport Section from \"./Section\";\nimport Statistics from \"./Statistics\";\nimport Notification from \"./Notification\";\n\nexport default class App extends Component {\n\n  static propTypes = {\n    state: PropTypes.shape({\n      good: PropTypes.number,\n      neutral: PropTypes.number,\n      bad: PropTypes.number\n    })\n  };\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n\n  handleBtnClick = (name) => () => {\n    this.setState(prevState => ({\n      [name]: prevState[name] + 1\n    }))\n  };\n\n  countTotalFeedback = () => {\n    return (\n      this.state.bad + this.state.neutral + this.state.good\n    )\n  };\n\n  countPositiveFeedback = () => {\n    return parseFloat(this.countTotalFeedback() === 0 ? 0 : (this.state.good / this.countTotalFeedback() * 100).toFixed(2));\n  };\n\n  render() {\n    const options = Object.keys(this.state);\n\n    return (\n        <>\n        <Section title={\"Please leave feedback\"}>\n          <FeedbackOptions onLeaveFeedback={this.handleBtnClick} options={options}/>\n        </Section>\n          {this.countTotalFeedback() === 0\n              ? (<Notification message={\"No feedback given\"}></Notification>)\n              : (<Section title={\"Statistics\"}>\n                <Statistics\n                    good={this.state.good}\n                    bad={this.state.bad}\n                    neutral={this.state.neutral}\n                    positivePercentage={this.countPositiveFeedback()}\n                    total={this.countTotalFeedback()}/>\n              </Section>)}\n        </>\n    )\n  }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App'\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}